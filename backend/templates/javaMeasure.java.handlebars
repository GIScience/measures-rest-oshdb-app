package org.giscience.measures.repository;

import org.giscience.measures.rest.measure.MeasureOSHDB;
import org.giscience.measures.rest.server.RequestParameter;
import org.giscience.measures.tools.Cast;
import org.giscience.measures.tools.Index;
import org.giscience.measures.tools.Lineage;
import org.giscience.utils.geogrid.cells.GridCell;
import org.heigit.bigspatialdata.oshdb.api.db.OSHDBDatabase;
import org.heigit.bigspatialdata.oshdb.api.db.OSHDBJdbc;
import org.heigit.bigspatialdata.oshdb.api.generic.OSHDBCombinedIndex;
import org.heigit.bigspatialdata.oshdb.api.mapreducer.MapAggregator;
import org.heigit.bigspatialdata.oshdb.api.object.OSMContribution;
import org.heigit.bigspatialdata.oshdb.api.object.OSMEntitySnapshot;
import org.heigit.bigspatialdata.oshdb.util.OSHDBTimestamp;
import org.heigit.bigspatialdata.oshdb.util.geometry.Geo;

import javax.ws.rs.Path;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;
import java.util.SortedMap;

{{#each imports}}
import {{this}};
{{/each}}

@Path("api/" + {{className}}.name)
public class {{className}} extends MeasureOSHDB<Number, {{mapReducibleType}}> {
    public static final String name = "{{id}}";

    public {{className}}(OSHDBJdbc oshdb) {
        super(oshdb);
    }

    public {{className}}(OSHDBDatabase oshdb, OSHDBJdbc oshdb_keydb) {
        super(oshdb, oshdb_keydb);
    }

    @Override
    public Boolean refersToTimeSpan() {
        return {{refersToTimespan}};
    }

{{#if date}}
    @Override
    public ZonedDateTime defaultDate() {
        return ZonedDateTime.parse("{{date}}T00:00:00+00:00", DateTimeFormatter.ISO_ZONED_DATE_TIME);
    }

{{/if}}
{{!--
    @Override
    public ZonedDateTime defaultDateFrom() {
        return null;
    }
--}}
{{#if daysBefore}}
    @Override
    public Integer defaultDaysBefore() {
        return {{daysBefore}};
    }

{{/if}}
{{#if intervalInDays}}
    @Override
    public Integer defaultIntervalInDays() {
        return {{intervalInDays}};
    }

{{/if}}
    @Override
    public SortedMap<GridCell, Number> compute(MapAggregator<GridCell, {{mapReducibleType}}> ___mapReducer, RequestParameter ___p) throws Exception {
        //** MEASURE BEGIN **//
{{#each parameters}}
        ___p.setDefault("{{name}}", "{{defaultValue}}");
{{/each}}

{{code}}

        //** MEASURE END **//
    }
}
